name: Deploy Online Doc

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          
      - name: Setup PNPM
        uses: pnpm/action-setup@v2
        with:
          version: latest
          run_install: false
          
      - name: Get pnpm store directory
        id: pnpm-cache
        run: |
          echo "pnpm_cache_dir=$(pnpm store path)" >> $GITHUB_OUTPUT
          
      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.pnpm-cache.outputs.pnpm_cache_dir }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
            
      - name: Install dependencies
        run: pnpm install
        
      - name: Build frontend
        run: pnpm build:frontend
        
      - name: Build backend
        run: pnpm build:backend
        
      - name: Debug - Check files
        run: |
          ls -la frontend/dist/
          ls -la backend/dist/
          
      - name: Create deployment package
        run: |
          tar -czf deploy.tar.gz frontend/dist backend/dist package.json pnpm-lock.yaml pnpm-workspace.yaml
          
      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: deploy-package
          path: deploy.tar.gz
          retention-days: 1
  
  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: deploy-package
          
      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts
          
      - name: Deploy to Server
        run: |
          echo "Deploying to ${{ secrets.SERVER_HOST }}..."
          
          # 上传部署包
          scp -v deploy.tar.gz ${{ secrets.SERVER_USERNAME }}@${{ secrets.SERVER_HOST }}:/tmp/
          
          # 解压并部署
          ssh -v ${{ secrets.SERVER_USERNAME }}@${{ secrets.SERVER_HOST }} "mkdir -p ${{ secrets.SERVER_DEPLOY_PATH }} && \
            tar -xzf /tmp/deploy.tar.gz -C ${{ secrets.SERVER_DEPLOY_PATH }} && \
            rm /tmp/deploy.tar.gz && \
            cd ${{ secrets.SERVER_DEPLOY_PATH }} && \
            pnpm install --prod && \
            pm2 reload ecosystem.config.js || pm2 start ecosystem.config.js"